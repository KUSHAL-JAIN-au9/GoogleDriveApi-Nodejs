import express from "express";
import cors from "cors";
import routes from "./routes/index.js";
// Google sheet npm package
import { GoogleSpreadsheet } from "google-spreadsheet";
import { JWT } from "google-auth-library";

// File handling package
import fs from "fs";

const app = express();
const PORT = 8000;

app.use(cors());
app.use(express.json());

const router = express.Router();

// spreadsheet key is the long id in the sheets URL
const RESPONSES_SHEET_ID = "1W1A87swNCtM9O8yIioWLQAOa_Vdl7XxuhSou_Pgh81g";

// Credentials for the service account
const CREDENTIALS = JSON.parse(
  fs.readFileSync("mystic-berm-404114-f27cc40b5a1c.json")
);

const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL || CREDENTIALS.client_email,
  key: process.env.GOOGLE_PRIVATE_KEY || CREDENTIALS.private_key,
  scopes: ["https://www.googleapis.com/auth/spreadsheets"],
});

// Create a new document
const doc = new GoogleSpreadsheet(RESPONSES_SHEET_ID, serviceAccountAuth);

// console.log("doc", doc);

const getRow = async (email) => {
  // use service account creds
  await doc.useServiceAccountAuth({
    client_email: CREDENTIALS.client_email,
    private_key: CREDENTIALS.private_key,
  });

  // load the documents info
  await doc.loadInfo();

  // Index of the sheet
  let sheet = doc.sheetsByIndex[0];

  // Get all the rows
  let rows = await sheet.getRows();

  for (let index = 0; index < rows.length; index++) {
    const row = rows[index];
    if (row.email == email) {
      console.log(row.user_name);
      console.log(row.password);
    }
  }
};

// getRow('email@gmail.com');

const addRow = async (rows) => {
  // use service account creds
  // await doc.useServiceAccountAuth({
  //   client_email: CREDENTIALS.client_email,
  //   private_key: CREDENTIALS.private_key,
  // });

  // Ensure that the header values are provided
  // const headerValues = ["email", "user_name", "password"];

  // const sheetDoc = await doc.addSheet({
  //   headerValues: headerValues, // Set header values here
  // });
  // Index of the sheet
  await doc.loadInfo();
  let sheet = doc.sheetsByIndex[0];

  await sheet.setHeaderRow(["email", "user_name", "password"]);

  // append rows
  // const larryRow = await sheetDoc.addRow({
  //   user_name: "Larry Page",
  //   email: "larry@google.com",
  //   password: "larry123",
  // });
  // const moreRows = await sheetDoc.addRows([
  //   {
  //     user_name: "Sergey Brin",
  //     email: "sergey@google.com",
  //     password: "Sergey123",
  //   },
  //   {
  //     user_name: "Eric Schmidt",
  //     email: "eric@google.com",
  //     password: "Eric123",
  //   },
  // ]);

  for (let index = 0; index < rows.length; index++) {
    const row = rows[index];
    await sheet.addRow(row);
  }

  // const rowsValues = await sheet.getRows();
  // console.log(rowsValues);
};

let rows = [
  {
    email: "email@email.com",
    user_name: "ramesh",
    password: "abcd@1234",
  },
  {
    email: "email@gmail.com",
    user_name: "dilip",
    password: "abcd@1234",
  },
];

// addRow(rows);

const updateRow = async (keyValue, oldValue, newValue) => {
  // use service account creds
  await doc.useServiceAccountAuth({
    client_email: CREDENTIALS.client_email,
    private_key: CREDENTIALS.private_key,
  });

  await doc.loadInfo();

  // Index of the sheet
  let sheet = doc.sheetsByIndex[0];

  let rows = await sheet.getRows();

  for (let index = 0; index < rows.length; index++) {
    const row = rows[index];
    if (row[keyValue] === oldValue) {
      rows[index][keyValue] = newValue;
      await rows[index].save();
      break;
    }
  }
};

// updateRow('email', 'email@gmail.com', 'ramesh@ramesh.com')

const deleteRow = async (keyValue, thisValue) => {
  // use service account creds
  await doc.useServiceAccountAuth({
    client_email: CREDENTIALS.client_email,
    private_key: CREDENTIALS.private_key,
  });

  await doc.loadInfo();

  // Index of the sheet
  let sheet = doc.sheetsByIndex[0];

  let rows = await sheet.getRows();

  for (let index = 0; index < rows.length; index++) {
    const row = rows[index];
    if (row[keyValue] === thisValue) {
      await rows[index].delete();
      break;
    }
  }
};

// deleteRow("email", "ramesh@ramesh.com");

app.get("/", (req, res) => {
  res.status(200).send("hii from server");
});

app.use(routes);

app.listen(PORT, (err, data) => {
  if (err) {
    throw new Error(err?.message);
  }
  console.log(`server is listening on port ${PORT}`);
});
